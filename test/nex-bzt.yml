###
# How to run:
#    1. debug/dev in Jmeter:  bzt nex-bzt.yml -gui
#    2. perf test          :  bzt nex-bzt.yml -report
###

execution:
- concurrency: 1
  ramp-up: 1m
  hold-for: 12h
  scenario: nex
      
scenarios:
  nex:
    data-sources:
    - ./test/nex-users.csv
    variables:
      hello: world
    default-address: http://localhost:8000

    requests:
    # 1. Create Product
    - url: /products
      label: products-create
      think-time: uniform(0.150s, 0.150s)
      method: POST
      headers:
        cache-control: no-cache
        Content-Type: application/json
      body: 'request-body-string'
      body: >
        {
          "id": "${id}-${__javaScript(Math.random())}",
          "title": "${title}",
          "passenger_capacity": ${passenger_capacity},
          "maximum_speed": ${maximum_speed},
          "in_stock": ${in_stock}
        }          
      assert:
      - contains:
        - 201
        subject: http-code
        not: false
      extract-jsonpath:
        product_id: $.id
        default: NOT_FOUND

    - if: '"${product_id}" == "NOT_FOUND"'
      then:
        - action: continue

    # 2. Get Product
    - url: /products/${product_id}
      label: product-get
      think-time: uniform(0.150s, 0.150s)
      method: GET
        
      assert:
      - contains:
        - 200
        subject: http-code
        not: false

    # 3. Get All Products
    - url: /products
      label: product-get-all
      think-time: uniform(0.150s, 0.150s)
      method: GET
        
      assert:
      - contains:
        - 200
        subject: http-code
        not: false

    # 4. Create Orders
    - url: /orders
      label: orders-create
      think-time: uniform(0.150s, 0.150s)
      method: POST
      headers:
        cache-control: no-cache
        Content-Type: application/json
      body: 'request-body-string'
      body: >
        {
          "order_details": [{"product_id": "${product_id}", "price": "100000.99", "quantity": 1}]
        }
      assert:
      - contains:
        - 201
        subject: http-code
        not: false
      extract-jsonpath:
        order_id: $.id
        default: NOT_FOUND
  
    - if: '"${order_id}" == "NOT_FOUND"'
      then:
        - action: continue
  
    # 5. Get Orders
    - url: /orders/${order_id}
      label: order-get
      think-time: uniform(0.150s, 0.150s)
      method: GET
        
      assert:
      - contains:
        - 200
        subject: http-code
        not: false
        
    - if: '"${order_id}" == "NOT_FOUND"'
      then:
        - action: continue

    # 6. Get All Orders
    - url: /orders
      label: order-get-all
      think-time: uniform(0.150s, 0.150s)
      method: GET
        
      assert:
      - contains:
        - 200
        subject: http-code
        not: false
  
    # 7. Delete Order
    - url: /orders/${order_id}
      label: order-delete
      think-time: uniform(0.200s, 0.150s)
      method: DELETE
        
      assert:
      - contains:
        - 204
        subject: http-code
        not: false

    # 8. Delete Product
    - url: /products/${product_id}
      label: product-delete
      think-time: uniform(0.200s, 0.150s)
      method: DELETE
        
      assert:
      - contains:
        - 204
        subject: http-code
        not: false
  

reporting:
- module: final-stats
  dump-xml: stats.xml